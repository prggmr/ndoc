#!/usr/bin/env php
<?php
/**
 *  Copyright 2010-12 Nickolas Whiting
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 * @author  Nickolas Whiting  <prggmr@gmail.com>
 * @package  ndoc
 * @copyright  Copyright (c), 2010-12 Nickolas Whiting
 */

/**
 * The doc generator works using a Chapter based generation.
 *
 * Note the info below is subject to change!
 *
 * Each root level folder is represented as a Chapter each sub folder
 * within is represented as a section continuing in infinitity, each
 * file within a section and chapter is considered a page.
 *
 * A visual representation would be ...
 *
 * chapter_title
 *  |- section_title
 *      |- another section
 *          |- section_nested_page
 *      |-  section_page
 *  |- another_page
 *
 *  ndoc would produce
 *
 *  1 ) Chapter_Title
 *      1.1 ) Section_Title
 *          1.1.1 ) Another_Section
 *             1.1.1.1 ) Section_Nested_Page
 *          1.1.2 ) Section_page
 *      1.2 ) Another_Page
 *
 *  etc..etc..
 *
 *  Pages are ordered in alphabetical order by default. To force pages into 
 *  a specific order provide the page number at the end of the filename as:
 *  __#
 *
 *  Example given:
 *
 *  chapter_title
 *      |- page_one__1
 *      |- page_two__2
 *
 *  ndoc would produce
 *
 *  1 ) Chapter_Title
 *      1.1 ) page_one
 *      1.2 ) page_two
 *
 *  When generating the docs ndoc does not analyze the content of pages
 *  this is to allow page content to take any form but the content is parsed!
 */

$usage = "usage: ndoc [options...] source output

Options:
  -f/--format   Output format. DEFAULT=html
  -h/--help     Shows this message.
  -v/--version  Display ndoc version.
  -x/--hidden   Scan hidden files and directories. DEFAULT=OFF
";

if (count($argv) == 1) {
    exit($usage);
}

$args = getopt('b:hvf:x', array(
    'help', 'version', 'base:', 'format:', 'hidden'
));

foreach ($args as $_opt => $_val) {
    switch ($_opt) {
        case 'b':
        case 'base':
            $basefile = $_val;
            break;
        case 'h':
        case 'help':
            exit($usage);
            break;
        case 'f':
        case 'format':
            $format = $_val;
            break;
        case 'v':
        case 'version':
            $version = true;
            break;
        case 'x':
        case 'hidden':
            define('NDOC_HIDDEN', true);
            break;
    }
}

// ARGUMENTS
// note this works for now ... if it at somepoint it causes problems
// it can be changed
array_shift($argv);
foreach ($argv as $_i => $_v) {
    if (strpos($_v, '-') !== false) unset($argv[$_i]);
}

// INCLUDE LIBRARY
// INCLUDE LIBRARY
$ncwd = dirname(realpath(__FILE__));
require_once $ncwd.'/../lib/ndoc.php';

if (!isset($format)) {
    $format = \ndoc\Output::$default_format;
}

if (!isset(\ndoc\Output::$output_formats[$format])) {
    print(sprintf(
        "%s is not supported a output format.%sSupported formats%s%s",
        $format, PHP_EOL, PHP_EOL, implode(PHP_EOL, array_keys(
            \ndoc\Output::$output_formats
        ))
    ));
    exit(0);
}

// VERSION OUTPUT
if (isset($version)) {
    print('ndoc ' . NDOC_VERSION . PHP_EOL);
    exit(0);
}

if (!isset($basefile)) {
    $basefile = 'index.php';
}


if (isset($argv[0])) {
    $source = $argv[0];
} else {
    $source = 'docs';
}

if (isset($argv[1])) {
    $output_dir = $argv[1];
} else {
    $output_dir = 'output';
}

if (!is_dir($source) || !is_readable($source)) {
    exit("Source directory cannot be read or found!".PHP_EOL.$usage);
}

if (!is_dir($output_dir) && !mkdir($output_dir) || 
    !is_writeable($output_dir)) {
    exit("Output directory cannot be written to or found".PHP_EOL.$usage);
}

$indexer = new \ndoc\Indexer(
    new ndoc(getcwd().'/'.$source)
);
$output = new \ndoc\Output(new ndoc(getcwd().'/'.$source), $format, $output_dir);
$output->generate();

function bookIndex($array, $parent = null, $section = null) {
    $chapter_number = 1;
    $section_number = 1;
    $string         = '';
    if (null === $section) {
        foreach ($array as $_name => $_node) {
            $section_number = 1;
            $string .= sprintf('%s%s. %s',
                $section, $chapter_number, $_name
            ).PHP_EOL;
            if (count($_node['sections']) != 0) {
                foreach ($_node['sections'] as $_sectionn => $_section) {
                    $string .= bookIndex($_section, $_sectionn, sprintf(
                        '    %s%s.%s.',
                        $section, $chapter_number, $section_number
                    ));
                    $section_number++;
                }
            }
            if (count($_node['pages']) != 0) {
                foreach ($_node['pages'] as $_pagename => $_page) {
                    $string .= sprintf('    %s%s %s',
                        $section, $section_number, $_pagename
                    ).PHP_EOL;
                    $section_number++;
                }
            }
            $chapter_number++;
        }
    } else {
        $string .= sprintf('%s %s',
            $section, $parent
        ).PHP_EOL; 
        if (count($array['sections']) != 0) {
            foreach ($array['sections'] as $_sectionn => $_section) {
                $string .= bookIndex($_section, $_sectionn, sprintf(
                    '    %s%s.',
                    $section, $section_number
                ));
                $section_number++;
            }
        }
        if (count($array['pages']) != 0) {
            foreach ($array['pages'] as $_pagename => $_page) {
                $string .= sprintf('    %s%s %s',
                    $section, $section_number, $_pagename
                ).PHP_EOL;
                $section_number++;
            }
        }
    }
    
    return $string;
}